<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2021/04/21/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>​    介绍 Markdown 的基本语法</p>
<span id="more"></span>

<h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h4><p>在行首插入 1 到 6 个 # ，对应 1 到 6 阶标题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">#### h4</span><br></pre></td></tr></table></figure>





<h4 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h4><p>Mark使用 * 作为标记强调字词的符号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">*倾斜*</span><br><span class="line">***加粗倾斜***</span><br><span class="line">~~加删除线~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>加粗</strong></p>
<p><em>倾斜</em></p>
<p><em><strong>加粗倾斜</strong></em></p>
<p><del>加删除线</del></p>
<h4 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3.分割线"></a>3.分割线</h4><p>在一行中用三个以上的 * 、- 、__  来建立一个分割线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***********</span><br><span class="line">-----------</span><br><span class="line">____________</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<hr>
<h4 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h4><p>在引用的文字前加 &gt; 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br><span class="line">&gt; 路漫漫其修远兮</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>这是一个引用</p>
<p>路漫漫其修远兮</p>
</blockquote>
<h4 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h4><h5 id="5-1-无序列表"><a href="#5-1-无序列表" class="headerlink" title="5.1 无序列表"></a>5.1 无序列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 无序列表</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>无序列表</li>
</ul>
<h5 id="5-2-有序列表"><a href="#5-2-有序列表" class="headerlink" title="5.2 有序列表"></a>5.2 有序列表</h5><p>有序列表使用数字接一个英文句点作为标记（序号跟内容之间有空格）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<h4 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|---|---:</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td>内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<h4 id="7-代码"><a href="#7-代码" class="headerlink" title="7.代码"></a>7.代码</h4><h5 id="7-1-单行代码"><a href="#7-1-单行代码" class="headerlink" title="7.1 单行代码"></a>7.1 单行代码</h5><p>代码之间用反引号包起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里有一句代码&#96;代码内容&#96;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>这里有一句代码<code>代码内容</code></p>
<h5 id="7-2-代码块"><a href="#7-2-代码块" class="headerlink" title="7.2 代码块"></a>7.2 代码块</h5><p>代码之间用三个反引号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​&#96;&#96;&#96;</span><br><span class="line">代码。。。。</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码。。。。</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>某盘免会员高速下载</title>
    <url>/2021/07/03/baidupan/</url>
    <content><![CDATA[<p>众所周知某盘的服务器架设在冥王星上，其下载速度实在是让人无力吐槽，下面介绍一种不用充值会员也能享受高速下载某盘文件的方法。</p>
<span id="more"></span>

<h4 id="1-下载Motrix"><a href="#1-下载Motrix" class="headerlink" title="1.下载Motrix"></a>1.下载Motrix</h4><p>Motrix 是一款全能的下载工具，支持下载 HTTP、FTP、BT、磁力链、某盘等资源。</p>
<p>下载链接：<a href="https://dl.moapp.me/https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-Setup-1.6.11.exe">https://dl.moapp.me/https://github.com/agalwood/Motrix/releases/download/v1.6.11/Motrix-Setup-1.6.11.exe</a></p>
<p>下载安装完成 Motrix 后，右键单击以管理员身份启动 Motrix</p>
<p>在右下角设置中可以查看并更改文件的下载路径</p>
<p><img src="/images/image-20210703105803303.png" alt="image-20210703105803303"></p>
<h4 id="2-在线解析"><a href="#2-在线解析" class="headerlink" title="2.在线解析"></a>2.在线解析</h4><p>在线解析链接：<a href="http://pan.akcsss.cn/">http://pan.akcsss.cn/</a></p>
<p>进入页面后，在对话框中输入某盘分享链接和提取码，并进行人机身份验证，验证完成后点击“解析并同意以上协议”</p>
<p><img src="/images/image-20210703110003120.png" alt="image-20210703110003120"></p>
<p>若是文件夹则需要先点击“打开”打开文件夹</p>
<p><img src="/images/image-20210703110151380.png" alt="image-20210703110151380"></p>
<p>打开后点击“下载”，若是单个文件可直接点击“下载”</p>
<p>注：本方法暂不支持一键批量下载，下载文件较多时较为麻烦</p>
<p><img src="/images/image-20210703110246754.png" alt="image-20210703110246754"></p>
<p>等待解析完成后，点击“发送至Motrix”即可享受高速下载</p>
<p>注：这一步之前请确保 Motrix 已经启动，实际下载速度取决于网速，如果有IDM、Ari2a等下载工具也可以使用，方法同理</p>
<p><img src="/images/image-20210703110534869.png" alt="image-20210703110534869"></p>
<p><img src="/images/image-20210703110657294.png" alt="image-20210703110657294"></p>
]]></content>
      <categories>
        <category>实用技巧</category>
      </categories>
      <tags>
        <tag>黑科技</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的方法</title>
    <url>/2021/04/22/java%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>​    介绍 java 中的方法</p>
<span id="more"></span>

<h4 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h4><p>java 中的方法类似于 C语言 中的函数，就是完成特定功能的代码块</p>
<h4 id="2-语法结构"><a href="#2-语法结构" class="headerlink" title="2.语法结构"></a>2.语法结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(形参)&#123;</span><br><span class="line">    方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-对-java-方法的语法结构解释说明"><a href="#3-对-java-方法的语法结构解释说明" class="headerlink" title="3.对 java 方法的语法结构解释说明"></a>3.对 java 方法的语法结构解释说明</h4><h5 id="3-1-修饰符"><a href="#3-1-修饰符" class="headerlink" title="3.1 修饰符"></a>3.1 修饰符</h5><p>分为访问控制修饰符 和 非访问控制修饰符(static)</p>
<p>访问控制修饰符：</p>
<ul>
<li><p>public：可以被任何包下的任何类所访问</p>
</li>
<li><p>private：只能被同类中元素访问</p>
</li>
<li><p>protected：被同包下的类访问 或者 被不同包的子类访问</p>
</li>
<li><p>默认：只能被同包下的元素访问</p>
</li>
</ul>
<h5 id="3-2-返回值类型"><a href="#3-2-返回值类型" class="headerlink" title="3.2 返回值类型"></a>3.2 返回值类型</h5><p>就是返回结果的数据类型，如 int 、double 、char 等</p>
<p>如果没有返回值，则返回值类型为 void</p>
<h5 id="3-3-方法名"><a href="#3-3-方法名" class="headerlink" title="3.3 方法名"></a>3.3 方法名</h5><p>方法命名时最好要见名知意，采用驼峰命名规则，即首字母小写，后面每个单词首字母大写</p>
<h4 id="4-方法怎么调用"><a href="#4-方法怎么调用" class="headerlink" title="4.方法怎么调用"></a>4.方法怎么调用</h4><ul>
<li>方法的修饰符为 static ：<strong>类名.方法名(实参）</strong></li>
<li>如果调用的方法位于同一个类中，“ 类名. ”可以省略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="comment">// 定义一个 doSome() 方法，返回值为 1；</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Example.doSome(); </span><br><span class="line">        <span class="comment">// 调用 doSome() 方法，因为在同一个类中，所以 Example.可省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-方法执行内存分析"><a href="#5-方法执行内存分析" class="headerlink" title="5.方法执行内存分析"></a>5.方法执行内存分析</h4><p>方法只定义，不调用，是不会执行的，在JVM中也不会给该方法分配运行所属的内存空间，只有在调用这方法时才会动态的给这个方法分配所属的内存空间</p>
<h5 id="5-1-JVM-内存划分"><a href="#5-1-JVM-内存划分" class="headerlink" title="5.1 JVM 内存划分"></a>5.1 JVM 内存划分</h5><p>方法区内存、堆内存、栈内存</p>
<h5 id="5-2-方法片段代码放在哪里？"><a href="#5-2-方法片段代码放在哪里？" class="headerlink" title="5.2 方法片段代码放在哪里？"></a>5.2 方法片段代码放在哪里？</h5><p>方法代码片段属于字节码文件的一部分，字节码文件在类加载的时候将其放到了<strong>方法区</strong>中，所以JVM中的方法区内存最先有数据，存放了方法片段代码</p>
<h5 id="5-3-方法执行过程的内存在哪里分配？"><a href="#5-3-方法执行过程的内存在哪里分配？" class="headerlink" title="5.3 方法执行过程的内存在哪里分配？"></a>5.3 方法执行过程的内存在哪里分配？</h5><p>每一次调用方法，需要给该方法分配独立的活动场所，在<strong>栈内存</strong>中分配，方法在调用的瞬间，会在栈中发生<strong>压栈</strong>动作，方法执行结束后发生<strong>弹栈</strong>动作</p>
<h4 id="6-方法重载"><a href="#6-方法重载" class="headerlink" title="6.方法重载"></a>6.方法重载</h4><h5 id="6-1-什么时候使用方法重载？"><a href="#6-1-什么时候使用方法重载？" class="headerlink" title="6.1 什么时候使用方法重载？"></a>6.1 什么时候使用方法重载？</h5><p>当多个方法功能相似时，尽可能让方法名相同，使用方法重载</p>
<h5 id="6-2-构造方法重载的条件"><a href="#6-2-构造方法重载的条件" class="headerlink" title="6.2 构造方法重载的条件"></a>6.2 构造方法重载的条件</h5><p>在同一个类中，多个方法方法名相同，但参数不同（顺序不同、数量不同、类型不同）即可构成方法重载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSome</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSome</span><span class="params">(<span class="keyword">char</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="comment">// 这两个方法功能相似，都是返回 1，但是参数不同，使用相同方法名即可构成方法重载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以上内容如有错漏之处，敬请指正。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>类和对象</title>
    <url>/2021/04/25/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>​    介绍 java 中的类和对象</p>
<span id="more"></span>

<h4 id="1-类和对象的概念"><a href="#1-类和对象的概念" class="headerlink" title="1.类和对象的概念"></a>1.类和对象的概念</h4><ul>
<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>
<li><strong>对象</strong>：对象是类的一个实例，对象有状态和行为。</li>
<li>eg：狗是一个类，而某一条狗是动物类实例化的一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>
</ul>
<h4 id="2-类的定义"><a href="#2-类的定义" class="headerlink" title="2.类的定义"></a>2.类的定义</h4><h5 id="2-1-语法结构"><a href="#2-1-语法结构" class="headerlink" title="2.1 语法结构"></a>2.1 语法结构</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    属性; <span class="comment">// 通常是采用一个变量的形式来完成定义</span></span><br><span class="line">    方法;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类名首字母大写，如果类名由多个单词组成，每个单词的首字母都要大写。</span></span><br></pre></td></tr></table></figure>

<p>eg：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    String breed;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    String colour;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>breed 、size 、colour 、age 均为属性，而 eat() 、run() 、sleep() 均为方法。</p>
<h5 id="2-2-类可以包含哪些变量？"><a href="#2-2-类可以包含哪些变量？" class="headerlink" title="2.2 类可以包含哪些变量？"></a>2.2 类可以包含哪些变量？</h5><ul>
<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>
<li><strong>成员变量（实例变量）</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>
<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li>
</ul>
<h4 id="3-对象的创建和使用"><a href="#3-对象的创建和使用" class="headerlink" title="3.对象的创建和使用"></a>3.对象的创建和使用</h4><h5 id="3-1-什么是对象"><a href="#3-1-什么是对象" class="headerlink" title="3.1 什么是对象"></a>3.1 什么是对象</h5><p>new运算符在<strong>堆内存</strong>中开辟的内存空间称为对象，一个类可以实例化 n 个对象。</p>
<h5 id="3-2-实例化对象的语法格式"><a href="#3-2-实例化对象的语法格式" class="headerlink" title="3.2 实例化对象的语法格式"></a>3.2 实例化对象的语法格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名 引用名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog dog = <span class="keyword">new</span> Dog(); <span class="comment">// 实例化一个狗对象</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-什么是引用"><a href="#3-3-什么是引用" class="headerlink" title="3.3 什么是引用"></a>3.3 什么是引用</h5><p>引用是储存在<strong>栈内存</strong>中的一个变量，相当于给实例化的对象取一个名称，引用中保存了该 java 对象的<strong>内存地址</strong>。</p>
<h5 id="3-4-访问实例变量"><a href="#3-4-访问实例变量" class="headerlink" title="3.4 访问实例变量"></a>3.4 访问实例变量</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">引用.变量名 <span class="comment">// 读取数据</span></span><br><span class="line">引用.变量名 = 值 <span class="comment">// 修改数据</span></span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dog.age <span class="comment">// 读取 dog 对象的 age 属性；</span></span><br><span class="line">dog.age = <span class="number">6</span>; <span class="comment">// 修改 dog 对象的 age 属性</span></span><br></pre></td></tr></table></figure>



<h4 id="4-垃圾回收器【自动垃圾回收机制，CG机制】"><a href="#4-垃圾回收器【自动垃圾回收机制，CG机制】" class="headerlink" title="4.垃圾回收器【自动垃圾回收机制，CG机制】"></a>4.垃圾回收器【自动垃圾回收机制，CG机制】</h4><p>JVM 三块内存中变化最频繁的是栈内存，GC机制主要针对堆内存，当一个对象没有引用指向它，无法被访问时，垃圾回收器将该 java 对象回收。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的封装</title>
    <url>/2021/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>介绍面向对象的三大特性之一 —— 封装</p>
<span id="more"></span>

<h4 id="1-什么是封装"><a href="#1-什么是封装" class="headerlink" title="1.什么是封装"></a>1.什么是封装</h4><p>封装包含两层含义：</p>
<ul>
<li>包装：将代码包装起来成为整体，方便调用和维护</li>
<li>封闭：实现信息的隐藏，提高安全性</li>
</ul>
<h4 id="2-封装的实现"><a href="#2-封装的实现" class="headerlink" title="2.封装的实现"></a>2.封装的实现</h4><ol>
<li><p>包装代码<br>将代码包装到方法中，将属性和方法包装到类中，将类保存到包中…</p>
</li>
<li><p>信息隐藏<br>隐藏某些不想被其他类调用的属性、方法和类</p>
</li>
</ol>
<h4 id="3-封装的步骤"><a href="#3-封装的步骤" class="headerlink" title="3. 封装的步骤"></a>3. 封装的步骤</h4><ol>
<li>所有属性私有化，使用 private 关键字进行修饰，修饰的所有数据只能在本类中访问；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>对外提供简单的操作入口，以后外部程序想要访问必须通过这些入口进行访问：</p>
<ul>
<li>对外提供两个公开的方法，set方法和get方法</li>
<li>想修改数据属性，调用set方法</li>
<li>想读取数据属性，调用get方法</li>
</ul>
</li>
</ol>
<h4 id="4-set-方法与-get-方法"><a href="#4-set-方法与-get-方法" class="headerlink" title="4. set 方法与 get 方法"></a>4. set 方法与 get 方法</h4><h5 id="4-1-语法格式"><a href="#4-1-语法格式" class="headerlink" title="4.1 语法格式"></a>4.1 语法格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 数据类型 方法名(形参)&#123;</span><br><span class="line">    方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-命名规范"><a href="#4-2-命名规范" class="headerlink" title="4.2 命名规范"></a>4.2 命名规范</h5><p>方法名均采用：</p>
<ul>
<li><p>set + 属性名（首字母大写）</p>
</li>
<li><p>get + 属性名（首字母大写）</p>
</li>
</ul>
<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">         age = a;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-set-方法与-get-方法的调用"><a href="#4-3-set-方法与-get-方法的调用" class="headerlink" title="4.3 set 方法与 get 方法的调用"></a>4.3 set 方法与 get 方法的调用</h4><p>引用.方法名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User(); <span class="comment">// 实例化一个 User 对象</span></span><br><span class="line">        </span><br><span class="line">        u.setAge(<span class="number">20</span>); <span class="comment">// 更改 age 的值为 20</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(u.getAge());</span><br><span class="line">        <span class="comment">// 输出 age 的值</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
